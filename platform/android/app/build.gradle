def buildAsLibrary = project.hasProperty('BUILD_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 26
    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.atlasengine.app"
        }
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

		if (buildAsApplication) {
			externalNativeBuild {
				cmake {
					arguments '-DASSIMP_BUILD_ZLIB=ON', '-DASSIMP_BUILD_TESTS=OFF',
                            '-DASSIMP_NO_EXPORT=ON', '-DASSIMP_BUILD_ASSIMP_TOOLS=OFF',
						    '-DANDROID_ARM_NEON=TRUE', '-DCMAKE_BUILD_TYPE=Release'
					cppFlags '-fexceptions -frtti -std=c++11 -O3'
				}
			}
		}
		else {
			externalNativeBuild {
				cmake {
					arguments '-DASSIMP_BUILD_ZLIB=ON', '-DASSIMP_BUILD_TESTS=OFF',
                            '-DASSIMP_NO_EXPORT=ON', '-DASSIMP_BUILD_ASSIMP_TOOLS=OFF',
                            '-DBUILD_LIBRARY=ON', '-DANDROID_ARM_NEON=TRUE',
                            '-DCMAKE_BUILD_TYPE=Release'
					cppFlags '-fexceptions -frtti -std=c++11 -O3'
				}
			}			
		}

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            version "3.10.2"
            path "../../../CMakeLists.txt"
        }
    }
    lintOptions {
        abortOnError false
    }
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.atlasengine.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
    productFlavors {
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
