name: Release pipeline

on: 
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version'
        required: true
        default: '0.1.0'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE_DEBUG: Debug
  BUILD_TYPE_RELEASE: Release

jobs:
  windows-build:
    runs-on: windows-latest
    name: Build on Windows
    # Run both builds in parallel and don't cancel if one fails
    strategy:
      matrix:
        build-type: [Release]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Microsoft Visual C++ CLI
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Download dependencies
        shell: pwsh
        run: |
          cd dependencies
          ./download_dependencies.ps1 -SkipCertificateCheck

      - name: Build ${{ matrix.build-type }} configuration with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ github.workspace }}/build/${{ matrix.build-type }}
          source-dir: ${{ github.workspace }}
          cc: "cl"
          cxx: "cl"
          configure-options: -G Ninja -DASSIMP_BUILD_TESTS=OFF -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DATLAS_DEMO=ON
          parallel: 16
          build-type: ${{ matrix.build-type }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Atlas Engine Demo Windows
          path: |
            data
            README.md
            LICENSE
            ${{ github.workspace }}/build/**/AtlasEngineDemo.exe
            ${{ github.workspace }}/build/**/*.dll
            !**/CMakeFiles
  
  linux-build:
    runs-on: ubuntu-latest
    name: Build on Linux
    # Run both builds in parallel and don't cancel if one fails
    strategy:
      matrix:
         build-type: [Release]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Download dependencies
        shell: bash
        run: |
          cd dependencies
          sh download_dependencies.sh
          sudo apt-get install libgl1-mesa-dev

      # https://github.com/marketplace/actions/setup-ninja
      - name: Build ${{ matrix.build-type }} configuration with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ github.workspace }}/build/${{ matrix.build-type }}
          source-dir: ${{ github.workspace }}
          cc: "gcc"
          cxx: "g++"
          configure-options: -G Ninja -DASSIMP_BUILD_TESTS=OFF -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DATLAS_DEMO=ON
          parallel: 16
          build-type: ${{ matrix.build-type }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Atlas Engine Demo Linux
          path: |
            data
            README.md
            LICENSE
            ${{ github.workspace }}/build/**/AtlasEngineDemo
            ${{ github.workspace }}/build/**/*.so
            !**/CMakeFiles

  release:
    runs-on: ubuntu-latest
    name: Create a new release
    needs: [windows-build, linux-build]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}
      
      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Zip Windows artifact
        run: zip -r "Atlas Engine Demo Windows.zip" "Atlas Engine Demo Windows"
        working-directory: ${{ github.workspace }}

      - name: Zip Linux artifact
        run: zip -r "Atlas Engine Demo Linux.zip" "Atlas Engine Demo Linux"
        working-directory: ${{ github.workspace }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_version }}
          release_name: Release ${{ github.event.inputs.release_version }}
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "${{ github.workspace }}/Atlas Engine Demo Windows.zip"
          asset_name: "Atlas Engine Demo Windows Release.zip"
          asset_content_type: application/zip

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "${{ github.workspace }}/Atlas Engine Demo Linux.zip"
          asset_name: "Atlas Engine Demo Linux.zip"
          asset_content_type: application/zip
