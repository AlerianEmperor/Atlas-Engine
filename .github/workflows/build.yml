name: Build pipeline

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [master]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE_DEBUG: Debug
  BUILD_TYPE_RELEASE: Release

jobs:
  windows-build:
    runs-on: windows-latest
    name: Build on Windows
    # Run both builds in parallel and don't cancel if one fails
    strategy:
      matrix:
        build-type: [Debug, Release]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Microsoft Visual C++ CLI
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Download dependencies
        shell: pwsh
        run: |
          cd dependencies
          ./download_dependencies.ps1 -SkipCertificateCheck

      - name: Build ${{ matrix.build-type }} configuration with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ github.workspace }}/build/${{ matrix.build-type }}
          source-dir: ${{ github.workspace }}
          cc: "cl"
          cxx: "cl"
          configure-options: -G Ninja -DASSIMP_BUILD_TESTS=OFF -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DATLAS_DEMO=ON
          parallel: 16
          build-type: ${{ matrix.build-type }}

      - name: Upload artifact
        if: ${{ matrix.build-type == 'Release' }}
        uses: actions/upload-artifact@v2
        with:
          name: Atlas Engine Demo Windows ${{ matrix.build-type }}
          path: |
            data
            README.md
            LICENSE
            ${{ github.workspace }}/build/**/AtlasEngineDemo.exe
            ${{ github.workspace }}/build/**/*.dll
            !**/CMakeFiles

  linux-build:
    runs-on: ubuntu-latest
    name: Build on Linux
    # Run both builds in parallel and don't cancel if one fails
    strategy:
      matrix:
         build-type: [Debug, Release]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Download dependencies
        shell: bash
        run: |
          cd dependencies
          sh download_dependencies.sh
          sudo apt-get update
          sudo apt-get install libgl1-mesa-dev

      # https://github.com/marketplace/actions/setup-ninja
      - name: Build ${{ matrix.build-type }} configuration with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ github.workspace }}/build/${{ matrix.build-type }}
          source-dir: ${{ github.workspace }}
          cc: "gcc"
          cxx: "g++"
          configure-options: -G Ninja -DASSIMP_BUILD_TESTS=OFF -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DATLAS_DEMO=ON
          parallel: 16
          build-type: ${{ matrix.build-type }}

      - name: Upload artifact
        if: ${{ matrix.build-type == 'Release' }}
        uses: actions/upload-artifact@v2
        with:
          name: Atlas Engine Demo Linux ${{ matrix.build-type }}
          path: |
            data
            README.md
            LICENSE
            ${{ github.workspace }}/build/**/AtlasEngineDemo
            ${{ github.workspace }}/build/**/*.so*
            !**/CMakeFiles

  code-quality:
    runs-on: ubuntu-latest
    name: Check code quality
    needs: [windows-build, linux-build]

    steps:
      - name: Check code meets quality standards
        id: codiga
        uses: codiga/github-action@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          codiga_api_token: ${{ secrets.CODIGA_API_TOKEN }}
          force_ref: 'none'
          min_quality_grade: 'GOOD'
          min_quality_score: '85'
          max_defects_rate: '0.01'
          max_complex_functions_rate: '0.03'
          max_long_functions_rate: '0.2'
          project_name: 'Atlas-Engine'
          max_timeout_sec: '1200'
