#include <sharedUniforms.hsh>

layout(binding = 9) uniform sampler2D terrainHeight;

uniform vec3 terrainTranslation;
uniform float terrainSideLength;
uniform float terrainHeightScale;

uniform float shoreWaveDistanceOffset;
uniform float shoreWaveDistanceScale;
uniform float shoreWaveAmplitude;
uniform float shoreWaveSteepness;
uniform float shoreWavePower;
uniform float shoreWaveSpeed;
uniform float shoreWaveLength;

vec3 CalculateGerstner(vec3 position) {

	vec2 terrainTex = (vec2(position.xz) - vec2(terrainTranslation.xz))
		/ terrainSideLength;

	float shoreDistance = textureLod(terrainHeight, terrainTex, 0.0).g;
	vec2 shoreGradient = normalize(2.0 * textureLod(terrainHeight, terrainTex, 0.0).ba - 1.0);

	// Avoid scaling by water depth. Resolution artifacts become obvious.
	float scale = clamp(1.0 - shoreDistance, 0.0, 1.0);
	scale *= clamp(shoreDistance * 10.0, 0.0, 1.0);

	// Should be uniforms
	float waveLength = shoreWaveLength / 100.0;
	float speed = shoreWaveSpeed / 100.0;

	float w = 1.0 / waveLength;
	float phi = speed * w;
	float rad = w * shoreDistance + phi * time;

	float modulation = saturate(sin(position.x / 20.0) + cos(position.z / 10.0));
	
	float distanceScale = saturate(1.0 - (distance(cameraLocation, position)
		 - shoreWaveDistanceOffset) / shoreWaveDistanceScale);

	float amplitude = 1.0 * shoreWaveAmplitude * scale * modulation * distanceScale;
	float steepness = 1.0 * shoreWaveSteepness * scale * modulation * distanceScale;

	vec3 offset;

	float gamma = shoreWavePower;
	offset.y = amplitude * pow(0.5 * sin(rad) + 0.5, gamma);
	offset.xz = -shoreGradient * steepness * amplitude * pow(0.5 * cos(rad) + 0.5, gamma);

	return offset;

}

vec2 CalculateShoreInteraction(vec3 position) {

	vec2 terrainTex = (vec2(position.xz) - vec2(terrainTranslation.xz))
		/ terrainSideLength;
	float shoreDistance = textureLod(terrainHeight, terrainTex, 0.0).g;

	float scale = clamp(1.0 - shoreDistance, 0.0, 1.0);
	scale *= clamp(shoreDistance * 10.0, 0.0, 1.0);

	// Should be uniforms
	float waveLength = shoreWaveLength / 100.0;
	float speed = shoreWaveSpeed / 100.0;

	float w = 1.0 / waveLength;
	float phi = speed * w;
	float rad = w * shoreDistance + phi * time;

	float modulation = saturate(sin(position.x / 20.0) + cos(position.z / 10.0));

	// Move these calculations to the fragment shader
	float foamShoreWave = max(-cos(rad), 0.0) * 1.0 * max(scale - 0.3, 0.0) * modulation;
	float breakingShoreWave = saturate(max(sin(rad - 0.7), 0.0) * 4.0 * max(scale - 0.3, 0.0)) * modulation;

	return vec2(saturate(foamShoreWave), breakingShoreWave);

}