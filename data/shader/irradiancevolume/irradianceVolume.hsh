#include <../common/octahedron.hsh>
#include <../common/utility.hsh>

layout(binding = 12) uniform sampler2DArray irradianceVolume;
layout(binding = 13) uniform sampler2DArray momentsVolume;

uniform vec3 volumeMin;
uniform vec3 volumeMax;
uniform ivec3 volumeProbeCount;

uniform int volumeIrradianceRes;
uniform int volumeMomentsRes;

vec3 GetIrradianceCoord(ivec3 probeIndex, vec3 dir) {

	vec2 totalResolution = vec2(volumeProbeCount.xz) * vec2(volumeIrradianceRes + 2);
	vec2 texelSize = 1.0 / totalResolution;

	vec2 irrRes = vec2(volumeIrradianceRes + 2);

	vec3 coord = vec3(irrRes * vec2(probeIndex.xz) + vec2(1.5), float(probeIndex.y));
	coord.xy *= texelSize;

	vec2 localCoord = UnitVectorToOctahedron(dir) * float(volumeIrradianceRes - 1.0) * texelSize;
	coord.xy += localCoord;

	return coord;

}

vec3 GetMomentsCoord(ivec3 probeIndex, vec3 dir) {

	vec2 totalResolution = vec2(volumeProbeCount.xz) * vec2(volumeMomentsRes + 2);
	vec2 texelSize = 1.0 / totalResolution;

	vec2 momRes = vec2(volumeMomentsRes + 2);

	vec3 coord = vec3(momRes * vec2(probeIndex.xz) + vec2(1.5), float(probeIndex.y));
	coord.xy *= texelSize;

	vec2 localCoord = UnitVectorToOctahedron(dir) * float(volumeMomentsRes - 1.0) * texelSize;
	coord.xy += localCoord;

	return coord;

}

vec4 GetLocalIrradiance(vec3 view, mat4 ivMatrix, vec3 N) {

	vec3 position = vec3(ivMatrix * vec4(view, 1.0));

	// Outside volume, only use sky probe
	// This is also a natural way to exist 
	// if there isn't any volume
	if (position.x <= volumeMin.x ||
		position.y <= volumeMin.y ||
		position.z <= volumeMin.z ||
		position.x >= volumeMax.x ||
		position.y >= volumeMax.y ||
		position.z >= volumeMax.z) {
		return vec4(0.0, 0.0, 0.0, 1.0);
	}

	vec3 volumeSize = volumeMax - volumeMin;
	vec3 cellSize = volumeSize / vec3(volumeProbeCount - ivec3(1));

	vec3 localPosition = position - volumeMin;
	ivec3 baseCell = ivec3(floor(localPosition / cellSize));

	float sumWeight = 0.0;
	vec4 sumIrradiance = vec4(0.0);

	float sumWeightNoCheb = 0.0;
	vec4 sumIrradianceNoCheb = vec4(0.0);

	vec3 alpha = localPosition / cellSize - vec3(baseCell);

	const float bias = 0.0;

	for (int i = 0; i < 8; i++) {
		ivec3 offset = ivec3(i, i >> 1, i >> 2) & ivec3(1);

		ivec3 gridCell = clamp(baseCell + offset, ivec3(0), volumeProbeCount - ivec3(1));

		vec3 probePos = vec3(gridCell) * cellSize + volumeMin;
		vec3 probeToPoint = position - probePos + N * bias;
		vec3 dir = normalize(-probeToPoint);
		float distToProbe = length(probeToPoint);

		vec3 trilinear = mix(vec3(1.0) - alpha, alpha, vec3(offset));

		// Creates pointlight like artefacts
		float weight = sqr((dot(dir, N) + 1.0) * 0.5) + 0.3;

		weight *= trilinear.x * trilinear.y * trilinear.z + 0.001;

		vec2 temp = texture(momentsVolume, GetMomentsCoord(gridCell, -dir)).rg;
		float mean = temp.x;
		float mean2 = temp.y;

		float chebWeight = 1.0;

		// Visibility (needs to be improved)
		if (distToProbe > mean) {
			float variance = abs(mean2 - sqr(mean));
			weight *= variance / (variance + max(sqr(distToProbe - mean), 0.0));
		}

		float threshold = 0.2;
		if (weight < threshold) {
			//weight *= sqr(weight) / sqr(threshold);
		}

		vec4 irradiance = sqrt(texture(irradianceVolume, GetIrradianceCoord(gridCell, N)));

		sumWeight += weight;
		sumIrradiance += weight * irradiance;

	}

	return sqr(sumIrradiance / sumWeight);

}