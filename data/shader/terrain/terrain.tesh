layout(quads, fractional_odd_spacing, cw) in;

out vec2 teTexCoords;

uniform sampler2D heightField;
uniform sampler2D displacementMap;

uniform vec2 nodeLocation;
uniform float nodeSideLength;

uniform float heightScale;
uniform float displacementScale;
uniform float displacementDistance;

uniform mat4 vMatrix;
uniform mat4 pMatrix;

uniform vec3 cameraLocation;


void main(){

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
	
	// world position
	vec4 position =
	((1 - u) * (1 - v) * gl_in[12].gl_Position +
	u * (1 - v) * gl_in[0].gl_Position +
	u * v * gl_in[3].gl_Position +
	(1 - u) * v * gl_in[15].gl_Position);
	
	float vertexDistance = distance(position.xyz, cameraLocation);
	
	vec2 texCoords = vec2(position.x, position.z) - nodeLocation;
	texCoords /= nodeSideLength;
	
	teTexCoords = texCoords;
	
	float displacement = texture(displacementMap, texCoords * 40.0f).r * displacementScale * clamp((displacementDistance - vertexDistance), 0.0f, 1.0f);
	
	position.y = texture(heightField, texCoords).r * heightScale + displacement;
	
#ifndef GEOMETRY_SHADER
	position = pMatrix * vMatrix * position;
#endif
	
	gl_Position = position;
	
}