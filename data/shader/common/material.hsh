#include <packing.hsh>

#define FEATURE_BASE_COLOR_MAP (1 << 1)
#define FEATURE_OPACITY_MAP (1 << 2)
#define FEATURE_NORMAL_MAP (1 << 3)
#define FEATURE_ROUGHNESS_MAP (1 << 4)
#define FEATURE_METALNESS_MAP (1 << 5)
#define FEATURE_AO_MAP (1 << 6)
#define FEATURE_TRANSMISSION (1 << 7)

struct Material {

	vec3 baseColor;
	vec3 emissiveColor;
	vec3 transmissiveColor;

	float opacity;

	float roughness;
	float metalness;
	float ao;
	
	float normalScale;
	float displacementScale;

	bool baseColorMap;
	bool opacityMap;
	bool normalMap;
	bool roughnessMap;
	bool metalnessMap;
	bool aoMap;
	bool transmissive;
	
};

struct PackedMaterial {

	int baseColor;
	int emissiveColor;
	int transmissiveColor;

	float emissiveIntensity;

	int data0;
	int data1;

	int features;

};

layout (std430, binding = 0) buffer PackedMaterials {
	PackedMaterial packedMaterials[];
};

Material UnpackMaterial(uint idx) {

	PackedMaterial compressed = packedMaterials[idx];

	Material material;

	material.baseColor = vec3(unpackColorVector(compressed.baseColor));
	material.emissiveColor = vec3(unpackColorVector(compressed.emissiveColor)) * compressed.emissiveIntensity;
	material.transmissiveColor = vec3(unpackColorVector(compressed.transmissiveColor));

	vec4 data0 = unpackColorVector(compressed.data0);
	vec4 data1 = unpackColorVector(compressed.data1);

	material.opacity = data0.x;

	material.roughness = data0.y;
	material.metalness = data0.z;
	material.ao = data1.x;

	material.normalScale = data0.y;
	material.displacementScale = data0.z;

	material.baseColorMap = (compressed.features & FEATURE_BASE_COLOR_MAP) > 0;
	material.opacityMap = (compressed.features & FEATURE_OPACITY_MAP) > 0;
	material.normalMap = (compressed.features & FEATURE_NORMAL_MAP) > 0;
	material.roughnessMap = (compressed.features & FEATURE_ROUGHNESS_MAP) > 0;
	material.metalnessMap = (compressed.features & FEATURE_METALNESS_MAP) > 0;
	material.aoMap = (compressed.features & FEATURE_AO_MAP) > 0;
	material.transmissive = (compressed.features & FEATURE_TRANSMISSION) > 0;

	return material;

}