#include <../common/PI.hsh>
#include <../common/random.hsh>

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {

    float a = roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = normalize(cross(N, tangent));
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);

}

void ImportanceSampleGGX(vec2 Xi, vec3 N, vec3 V, float roughness,
                         out vec3 L, out float pdf) {

    vec3 H = ImportanceSampleGGX(Xi, N, roughness);
    L = 2.0 * dot(V, H) * H - V;

    pdf = dot(N, H) / (4.0 * abs(dot(V, H)));

}

void ImportanceSampleCosDir(vec3 N, vec2 rand, out vec3 L,
    out float NdotL, out float pdf) {

    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    float u1 = rand.x;
    float u2 = rand.y;

    float r = sqrt(u1);
    float phi = u2 * PI * 2.0;

    L = vec3(r * cos(phi), r * sin(phi), sqrt(max(0.0, 1.0 - u1)));
    L = normalize(tangent * L.y + bitangent * L.x + N * L.z);

    NdotL = dot(L, N);
    pdf = NdotL / PI;

}

void ImportanceSampleCosDir(vec3 N, float seed0, float seed1, out vec3 L,
    out float NdotL, out float pdf) {

    float u1 = random(seed0, seed1);
    float u2 = random(seed0, seed1);

    ImportanceSampleCosDir(N, vec2(u1, u2), L, NdotL, pdf);

}