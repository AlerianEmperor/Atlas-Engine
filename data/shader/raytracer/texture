#include <structures>
#include <../common/sample>

layout (binding = 3) uniform sampler2DArray diffuseTextures;
layout (binding = 4) uniform sampler2DArray normalTextures;
layout (binding = 5) uniform sampler2DArray specularTextures;
layout (binding = 6, rgba8) readonly uniform imageCube environmentMap;

vec2 GetTexCoord(vec2 texCoord, Texture tex, vec2 size) {
	
	return (vec2(mod(texCoord.x, float(tex.width)),
		mod(texCoord.y, float(tex.height))) + 
		vec2(tex.x, tex.y)) / size;
		
}

vec4 SampleDiffuseBilinear(Texture tex, vec2 texCoord) {
	
	if (tex.layer < 0)
		return vec4(1.0);
		
	texCoord *= vec2(tex.width, tex.height);
	
	const vec2 size = vec2(textureSize(diffuseTextures, 0));
	texCoord = GetTexCoord(texCoord, tex, size);
	
	return sampleTexBilinear(diffuseTextures, 
		vec3(texCoord, float(tex.layer)), SAMPLE_REPEAT);
	
}

vec4 SampleNormalBilinear(Texture tex, vec2 texCoord) {
	
	if (tex.layer < 0)
		return vec4(1.0);
		
	texCoord *= vec2(tex.width, tex.height);
	
	const vec2 size = vec2(textureSize(normalTextures, 0));
	texCoord = GetTexCoord(texCoord, tex, size);
	
	return sampleTexBilinear(normalTextures, 
		vec3(texCoord, float(tex.layer)), SAMPLE_REPEAT);
	
}

vec4 SampleSpecularBilinear(Texture tex, vec2 texCoord) {
	
	if (tex.layer < 0)
		return vec4(1.0);
		
	texCoord *= vec2(tex.width, tex.height);
	
	const vec2 size = vec2(textureSize(specularTextures, 0));
	texCoord = GetTexCoord(texCoord, tex, size);
	
	return sampleTexBilinear(specularTextures, 
		vec3(texCoord, float(tex.layer)), SAMPLE_REPEAT);
	
}

vec4 SampleEnvironmentMap(vec3 v) {

	vec3 vAbs = abs(v);
	float ma;
	vec2 uv;
	int faceIndex;

	if(vAbs.z >= vAbs.x && vAbs.z >= vAbs.y)
	{
		faceIndex = v.z < 0.0 ? 5 : 4;
		ma = 0.5 / vAbs.z;
		uv = vec2(v.z < 0.0 ? -v.x : v.x, -v.y);
	}
	else if(vAbs.y >= vAbs.x)
	{
		faceIndex = v.y < 0.0 ? 3 : 2;
		ma = 0.5 / vAbs.y;
		uv = vec2(v.x, v.y < 0.0 ? -v.z : v.z);
	}
	else
	{
		faceIndex = v.x < 0.0 ? 1 : 0;
		ma = 0.5 / vAbs.x;
		uv = vec2(v.x < 0.0 ? v.z : -v.z, -v.y);
	}

	uv = uv * ma + 0.5;

	ivec2 size = imageSize(environmentMap);
	ivec2 pixel = clamp(ivec2(vec2(size).xy * uv - 0.5), ivec2(0), ivec2(size) - 1);

	ivec3 coord = ivec3(pixel, faceIndex);

	return imageLoad(environmentMap, coord);

}