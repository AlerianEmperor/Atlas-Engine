// About alignement in GLSL: 
// A structure has to be a mupltiple of the size of
// it's largest member, e.g. for a bunch of floats it's one byte
// Every vec3 gets rounded up to 16 bytes, which means the structure
// has to be a size of multiple of 16 bytes.

#define INVALID_RAY_ID -1

struct PackedRay {

	vec4 origin;
	vec4 direction;
	vec4 data;

};

struct Ray {

	int pixelID;
	
	vec3 origin;
	vec3 direction;
	vec3 inverseDirection;
	
	vec3 color;
	vec3 throughput;

	//int mask;
	
};

struct AABB {
	
	float minX;
	float minY;
	float minZ;
	float maxX;
	float maxY;
	float maxZ;
	
};

struct PackedTriangle {
	
	vec4 v0;
	vec4 v1;
	vec4 v2;
	vec4 d0;
	vec4 d1;
	
};

struct Triangle {
	
	vec3 v0;
	vec3 v1;
	vec3 v2;
	
	vec3 n0;
	vec3 n1;
	vec3 n2;
	
	vec3 t;
	vec3 bt;
	
	vec2 uv0;
	vec2 uv1;
	vec2 uv2;
	
	int materialIndex;	
	
};

struct Texture {
	
	int layer;
	
	int x;
	int y;
	
	int width;
	int height;
	
};

struct RaytraceMaterial {
	
	float baseR;
	float baseG;
	float baseB;
	
	float emissR;
	float emissG;
	float emissB;
	
	float opacity;
	
	float roughness;
	float metalness;
	float ao;
	
	float normalScale;
	
	int invertUVs;
	
	Texture baseColorTexture;
	Texture opacityTexture;
	Texture normalTexture;
	Texture roughnessTexture;
	Texture metalnessTexture;
	Texture aoTexture;

};



struct BVHNode {
	
	uint data0;
	uint data1;
	AABB aabb;
	
};

struct Light {

    vec3 location;
	vec3 direction;
	
    vec3 color;
	float intensity;
	
	float scatteringFactor;
		
	float radius;

};

struct DispatchIndirectCommand {
	uint  numGroupsX;
	uint  numGroupsY;
	uint  numGroupsZ;
};