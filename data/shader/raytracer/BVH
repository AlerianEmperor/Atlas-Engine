#include <intersections>
#include <structures>

#define STACK_SIZE 32

layout (std430, binding = 6) buffer Triangles {
	PackedTriangle triangles[];
};

layout(std430, binding = 7) buffer Nodes {
	BVHNode nodes[];
};

void CheckLeafClosest(Ray ray, uint nodePtr, float tmin, float tmax,
	inout int triangleIndex, inout vec3 intersection) {
		
	uint offset = nodes[nodePtr].data1;
	uint count = nodes[nodePtr].data2 & uint(0x7fffffff);
	
	vec3 sol, v0, v1, v2, n;
	
	for (uint i = offset; i < offset + count; i++) {
		v0 = triangles[i].v0.xyz;
		v1 = triangles[i].v1.xyz;
		v2 = triangles[i].v2.xyz;
		float d = 0.0;
#ifdef BACKFACE_CULLING
		n = cross(v0 - v1, v0 - v2);
		d = dot(n, ray.direction);
#endif
		if (Intersection(ray, v0, v1, v2, sol) && d <= 0.0) {
			if (sol.x < intersection.x) {
				intersection = sol;
				triangleIndex = int(i);
			}
		}
	}
	
}

bool CheckLeaf(Ray ray, uint nodePtr, float tmin, float tmax) {
		
	uint offset = nodes[nodePtr].data1;
	uint count = nodes[nodePtr].data2 & uint(0x7fffffff);
	
	vec3 sol, v0, v1, v2, n;
	bool hit = false;
	
	for (uint i = offset; i < offset + count; i++) {
		v0 = triangles[i].v0.xyz;
		v1 = triangles[i].v1.xyz;
		v2 = triangles[i].v2.xyz;
		float d = 0.0;
#ifdef BACKFACE_CULLING
		n = cross(v0 - v1, v0 - v2);
		d = dot(n, ray.direction);
#endif
		if (Intersection(ray, v0, v1, v2, sol) && d <= 0.0) {
			hit = true;
			break;
		}
	}

	return hit;
	
}

void QueryBVHClosest(Ray ray, float tmin, float tmax, out int triangleIndex,
	out vec3 intersection) {
		
	uint stack[STACK_SIZE];
	uint stackPtr = uint(1);
	
	intersection.x = tmax;
	
	BVHNode node = nodes[0];
	
	do {
		// If the pointer is -1 then there is no child.
		const uint childLPtr = node.data1;
		const uint childRPtr = node.data2;
		
		float tL = 0.0;
		float tR = 0.0;
		
		const bool intersectL = Intersection(ray, 
				nodes[childLPtr].aabb, tmin, tmax, tL);
		const bool isLLeaf = (nodes[childLPtr].data2 & uint(0x80000000)) > uint(0);
		const bool validL = tL < intersection.x;
		
		const bool intersectR = Intersection(ray, 
				nodes[childRPtr].aabb, tmin, tmax, tR);
		const bool isRLeaf = (nodes[childRPtr].data2 & uint(0x80000000)) > uint(0);
		const bool validR = tR < intersection.x;
		
		const bool traverseL = (intersectL && !isLLeaf && validL);
		const bool traverseR = (intersectR && !isRLeaf && validR);
		
		if(intersectL && isLLeaf && validL) {
			CheckLeafClosest(ray, childLPtr, tmin, tmax, 
				triangleIndex, intersection);
		}
		
		if (intersectR && isRLeaf && validR) {
			CheckLeafClosest(ray, childRPtr, tmin, tmax,
				triangleIndex, intersection);
		}
		
		if (!traverseL && !traverseR) {
			node = nodes[stack[--stackPtr]];
		}
		else {
			node = traverseL ? nodes[childLPtr] :
				nodes[childRPtr];
			if (traverseL && traverseR) {
				if (stackPtr < STACK_SIZE - 1) {
					stack[stackPtr++] = childRPtr;
				}
			}
		}
			
	}
	while (stackPtr != uint(0));
		
}

bool QueryBVH(Ray ray, float tmin, float tmax) {
	
	bool hit = false;

	uint stack[STACK_SIZE];
	uint stackPtr = uint(1);
	
	BVHNode node = nodes[0];
	
	do {
		// If the pointer is -1 then there is no child.
		const uint childLPtr = node.data1;
		const uint childRPtr = node.data2;
		
		float tL = 0.0;
		float tR = 0.0;
		
		const bool intersectL = Intersection(ray, 
			nodes[childLPtr].aabb, tmin, tmax, tL);
		const bool isLLeaf = (nodes[childLPtr].data2 & uint(0x80000000)) > uint(0);
		
		const bool intersectR = Intersection(ray, 
				nodes[childRPtr].aabb, tmin, tmax, tR);
		const bool isRLeaf = (nodes[childRPtr].data2 & uint(0x80000000)) > uint(0);

		const bool traverseL = (intersectL && !isLLeaf);
		const bool traverseR = (intersectR && !isRLeaf);
		
		if(intersectL && isLLeaf) {
			if (CheckLeaf(ray, childLPtr, tmin, tmax)) {
				hit = true;
				break;
			}
		}
		
		if (intersectR && isRLeaf) {
			if (CheckLeaf(ray, childRPtr, tmin, tmax)) {
				hit = true;
				break;
			}
		}
		
		if (!traverseL && !traverseR) {
			node = nodes[stack[--stackPtr]];
		}
		else {
			node = traverseL ? nodes[childLPtr] :
				nodes[childRPtr];
			if (traverseL && traverseR) {
				if (stackPtr < STACK_SIZE - 1) {
					stack[stackPtr++] = childRPtr;
				}
			}
		}
			
	}
	while (!hit && stackPtr != uint(0));

	return hit;
		
}