#include <structures.hsh>
#include <../common/sample.hsh>

layout (binding = 0) uniform sampler2DArray baseColorTextures;
layout (binding = 1) uniform sampler2DArray opacityTextures;
layout (binding = 2) uniform sampler2DArray normalTextures;
layout (binding = 3) uniform sampler2DArray roughnessTextures;
layout (binding = 4) uniform sampler2DArray metalnessTextures;
layout (binding = 5) uniform sampler2DArray aoTextures;
layout (binding = 6) uniform samplerCube environmentMap;

vec2 GetTexCoord(vec2 texCoord, Texture tex, vec2 size) {
	
	return (vec2(mod(texCoord.x, float(tex.width) - 0.5),
		mod(texCoord.y, float(tex.height) - 0.5)) + 
		vec2(tex.x, tex.y)) / size;
		
}

vec3 SampleBaseColorBilinear(Texture tex, vec2 texCoord) {
	
	if (tex.layer < 0)
		return vec3(1.0);
		
	texCoord *= vec2(tex.width - 1, tex.height - 1);
	texCoord += vec2(0.5);
	
	vec2 size = vec2(textureSize(baseColorTextures, 0));
	texCoord = GetTexCoord(texCoord, tex, size);
	
	return textureLod(baseColorTextures, 
		vec3(texCoord, float(tex.layer)), 0).rgb;
	
}

float SampleOpacityBilinear(Texture tex, vec2 texCoord) {
	
	if (tex.layer < 0)
		return 1.0;
		
	texCoord *= vec2(tex.width - 1, tex.height - 1);
	texCoord += vec2(0.5);
	
	vec2 size = vec2(textureSize(opacityTextures, 0));
	texCoord = GetTexCoord(texCoord, tex, size);
	
	return textureLod(opacityTextures, 
		vec3(texCoord, float(tex.layer)), 0).r;
	
}

vec3 SampleNormalBilinear(Texture tex, vec2 texCoord) {
	
	if (tex.layer < 0)
		return vec3(1.0);
		
	texCoord *= vec2(tex.width - 1, tex.height - 1);
	texCoord += vec2(0.5);
	
	vec2 size = vec2(textureSize(normalTextures, 0));
	texCoord = GetTexCoord(texCoord, tex, size);
	
	return textureLod(normalTextures, 
		vec3(texCoord, float(tex.layer)), 0).rgb;
	
}

float SampleRoughnessBilinear(Texture tex, vec2 texCoord) {
	
	if (tex.layer < 0)
		return 1.0;
		
	texCoord *= vec2(tex.width - 1, tex.height - 1);
	texCoord += vec2(0.5);
	
	vec2 size = vec2(textureSize(roughnessTextures, 0));
	texCoord = GetTexCoord(texCoord, tex, size);
	
	return textureLod(roughnessTextures, 
		vec3(texCoord, float(tex.layer)), 0).r;
	
}

float SampleMetalnessBilinear(Texture tex, vec2 texCoord) {
	
	if (tex.layer < 0)
		return 1.0;
		
	texCoord *= vec2(tex.width - 1, tex.height - 1);
	texCoord += vec2(0.5);
	
	vec2 size = vec2(textureSize(metalnessTextures, 0));
	texCoord = GetTexCoord(texCoord, tex, size);
	
	return textureLod(metalnessTextures, 
		vec3(texCoord, float(tex.layer)), 0).r;
	
}

float SampleAoBilinear(Texture tex, vec2 texCoord) {
	
	if (tex.layer < 0)
		return 1.0;
		
	texCoord *= vec2(tex.width - 1, tex.height - 1);
	texCoord += vec2(0.5);
	
	vec2 size = vec2(textureSize(aoTextures, 0));
	texCoord = GetTexCoord(texCoord, tex, size);
	
	return textureLod(aoTextures, 
		vec3(texCoord, float(tex.layer)), 0).r;
	
}

vec4 SampleEnvironmentMap(vec3 v) {

	return textureLod(environmentMap, v, 0);

}