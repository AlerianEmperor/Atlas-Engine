#include <structures.hsh>
#include <../common/random.hsh>
#include <../common/PI.hsh>
#include <../common/packing.hsh>

#define INF 1000000000000.0
#define EPSILON 0.01

Triangle UnpackTriangle(PackedTriangle triangle) {
	
	Triangle tri;

	tri.v0 = triangle.v0.xyz;
	tri.v1 = triangle.v1.xyz;
	tri.v2 = triangle.v2.xyz;
	
	tri.n0 = vec3(unpackUnitVector(floatBitsToInt(triangle.v0.w)));
	tri.n1 = vec3(unpackUnitVector(floatBitsToInt(triangle.v1.w)));
	tri.n2 = vec3(unpackUnitVector(floatBitsToInt(triangle.v2.w)));	
	
	tri.t = vec3(unpackUnitVector(floatBitsToInt(triangle.d1.x)));
	tri.bt = vec3(unpackUnitVector(floatBitsToInt(triangle.d1.y)));
	
	tri.uv0 = unpackHalf2x16(floatBitsToUint(triangle.d0.x));
	tri.uv1 = unpackHalf2x16(floatBitsToUint(triangle.d0.y));
	tri.uv2 = unpackHalf2x16(floatBitsToUint(triangle.d0.z));
	
	tri.materialIndex = floatBitsToInt(triangle.d0.w);
	
	return tri;
	
}

Ray UnpackRay(PackedRay compressed) {

	Ray ray;
	
	ray.pixelID = floatBitsToInt(compressed.origin.w);
	ray.origin = compressed.origin.xyz;
	ray.direction = compressed.direction.xyz;
	ray.inverseDirection = 1.0 / ray.direction;
	
	ray.color.xy = unpackHalf2x16(floatBitsToUint(compressed.data.x));
	ray.throughput.xy = unpackHalf2x16(floatBitsToUint(compressed.data.y));
	vec2 comn = unpackHalf2x16(floatBitsToUint(compressed.data.z));

	ray.color.z = comn.x;
	ray.throughput.z = comn.y;
	
	return ray;

}

PackedRay PackRay(Ray ray) {

	PackedRay compressed;
	
	compressed.origin.w = intBitsToFloat(ray.pixelID);
	compressed.origin.xyz = ray.origin;
	compressed.direction.xyz = ray.direction;
	
	vec2 comn = vec2(ray.color.z, ray.throughput.z);
	compressed.data.x = uintBitsToFloat(packHalf2x16(ray.color.xy));
	compressed.data.y = uintBitsToFloat(packHalf2x16(ray.throughput.xy));	
	compressed.data.z = uintBitsToFloat(packHalf2x16(comn));	
	
	return compressed;

}

vec3 HemisphereCos(vec3 dir, vec2 coord, float seed) {
	
	// Tangent space
	vec3 w = dir;
	vec3 u = normalize(cross((abs(w.x) > 0.1 ? vec3(0.0, 1.0, 0.0)
		: vec3(1.0, 0.0, 0.0)), w));
	vec3 v = cross(w, u);
	
	// create 2 random numbers
	float r1 = 2.0 * PI * random(coord, seed);
	float r2 = random(coord, seed);
	float r2s = sqrt(r2);
	
	return normalize(u*cos(r1)*r2s + v*sin(r1)*r2s + w*sqrt(1.0 - r2));
	
}

void ImportanceSampleCosDir(vec3 N, vec2 coord, float seed, out vec3 L,
    out float NdotL, out float pdf) {

    vec3 up = abs(N.z) < 0.999 ? vec3(0, 0, 1) : vec3(1, 0, 0);
    vec3 tangentX = normalize(cross(up, N));
    vec3 tangentY = cross(N, tangentX);

    float u1 = random(coord, seed);
    float u2 = random(coord, seed);

    float r = sqrt(u1);
    float phi = u2 * PI * 2.0;

    L = vec3(r * cos(phi), r * sin(phi), sqrt(max(0.0, 1.0 - u1)));
    L = normalize(tangentX * L.y + tangentY * L.x + N * L.z);

    NdotL = dot(L, N);
    pdf = NdotL / PI;

}

vec3 HemisphereCos(vec3 dir, float exponent, vec2 coord, float seed) {
	
	// Tangent space
	vec3 w = dir;
	vec3 u = normalize(cross((abs(w.x) > 0.1 ? vec3(0.0, 1.0, 0.0)
		: vec3(1.0, 0.0, 0.0)), w));
	vec3 v = cross(w, u);
	
	// create 2 random numbers
	float r1 = 2.0 * PI * random(coord, seed);
	float r2 = pow(random(coord, seed), exponent);
	float r2s = sqrt(r2);
	
	return normalize(u*cos(r1)*r2s + v*sin(r1)*r2s + w*sqrt(1.0 - r2));
	
}

void groupMemoryBarrierWithSync() {

	barrier();
	groupMemoryBarrier();

}