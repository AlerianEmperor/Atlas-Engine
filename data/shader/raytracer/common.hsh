#include <structures.hsh>
#include <../common/random.hsh>
#include <../common/PI.hsh>
#include <../common/packing.hsh>

#define INF 1000000000000.0
#define EPSILON 0.001

#define DIRECTIONAL_LIGHT 0
#define TRIANGLE_LIGHT 1

Triangle UnpackTriangle(PackedTriangle triangle) {
	
	Triangle tri;

	tri.v0 = triangle.v0.xyz;
	tri.v1 = triangle.v1.xyz;
	tri.v2 = triangle.v2.xyz;
	
	tri.n0 = vec3(unpackUnitVector(floatBitsToInt(triangle.v0.w)));
	tri.n1 = vec3(unpackUnitVector(floatBitsToInt(triangle.v1.w)));
	tri.n2 = vec3(unpackUnitVector(floatBitsToInt(triangle.v2.w)));	
	
	tri.t = vec3(unpackUnitVector(floatBitsToInt(triangle.d1.x)));
	tri.bt = vec3(unpackUnitVector(floatBitsToInt(triangle.d1.y)));
	
	tri.uv0 = unpackHalf2x16(floatBitsToUint(triangle.d0.x));
	tri.uv1 = unpackHalf2x16(floatBitsToUint(triangle.d0.y));
	tri.uv2 = unpackHalf2x16(floatBitsToUint(triangle.d0.z));
	
	tri.materialIndex = floatBitsToInt(triangle.d0.w);
	
	return tri;
	
}

Ray UnpackRay(PackedRay compressed) {

	Ray ray;
	
	ray.ID = floatBitsToInt(compressed.origin.w);
	ray.origin = compressed.origin.xyz;
	ray.direction = compressed.direction.xyz;
	ray.inverseDirection = 1.0 / ray.direction;
	
	ray.color.xy = unpackHalf2x16(floatBitsToUint(compressed.data.x));
	ray.throughput.xy = unpackHalf2x16(floatBitsToUint(compressed.data.y));
	vec2 comn = unpackHalf2x16(floatBitsToUint(compressed.data.z));

	ray.color.z = comn.x;
	ray.throughput.z = comn.y;

	ray.data = vec2(compressed.direction.w, compressed.data.w);
	
	return ray;

}

PackedRay PackRay(Ray ray) {

	PackedRay compressed;
	
	compressed.origin.w = intBitsToFloat(ray.ID);
	compressed.origin.xyz = ray.origin;
	compressed.direction.xyz = ray.direction;
	
	vec2 comn = vec2(ray.color.z, ray.throughput.z);
	compressed.data.x = uintBitsToFloat(packHalf2x16(ray.color.xy));
	compressed.data.y = uintBitsToFloat(packHalf2x16(ray.throughput.xy));	
	compressed.data.z = uintBitsToFloat(packHalf2x16(comn));	
	
	return compressed;

}

Light UnpackLight(PackedLight compressed) {

	Light light;

	light.P = compressed.data0.xyz;
	light.N = vec3(compressed.N);

	light.radiance = vec3(compressed.data0.w, 
		compressed.data1.w, compressed.N.w);

	uint data = floatBitsToUint(compressed.data1.x);
	light.type = ((data & 0xF0000000u) >> 28u);
	light.idx = (data & 0x0FFFFFFFu);

	light.pdf = compressed.data1.y;
	light.area = compressed.data1.z;
	light.brightness = dot(light.radiance, vec3(0.33333));

	return light;

}

void groupMemoryBarrierWithSync() {

	barrier();
	groupMemoryBarrier();

}