#include <common.hsh>
#include <intersections.hsh>
#include <structures.hsh>
#include <surface.hsh>

#define STACK_SIZE 32

struct PackedBVHNode {
	vec4 data0;
	vec4 data1;
};

struct BVHNode {
	
	uint data0;
	uint data1;
	AABB aabb;
	
};

layout (std430, binding = 6) buffer Triangles {
	PackedTriangle triangles[];
};

layout(std430, binding = 7) buffer Nodes {
	PackedBVHNode nodes[];
};

BVHNode UnpackNode(PackedBVHNode compressed) {
	BVHNode node;

	node.data0 = floatBitsToUint(compressed.data0.x);
	node.data1 = floatBitsToUint(compressed.data0.y);

	node.aabb.min = vec3(compressed.data0.z,
		compressed.data0.w, compressed.data1.x);
	node.aabb.max = vec3(compressed.data1.y,
		compressed.data1.z, compressed.data1.w);

	return node;
}

shared uint stack[STACK_SIZE][32];

void CheckLeafClosest(inout Ray ray,  BVHNode node, float tmin, float tmax) {
		
	uint count = node.data0 & uint(0x1fffffff);
	uint offset = node.data1;
	
	vec3 sol, v0, v1, v2, n;
	
	for (uint i = offset; i < offset + count; i++) {
		v0 = triangles[i].v0.xyz;
		v1 = triangles[i].v1.xyz;
		v2 = triangles[i].v2.xyz;
		float d = 0.0;
#ifdef BACKFACE_CULLING
		n = cross(v0 - v1, v0 - v2);
		d = dot(n, ray.direction);
#endif
		bool intersect = IntersectTriangle(ray, v0, v1, v2, sol);
		if (intersect && sol.x > tmin && sol.x < tmax && d <= 0.0) {
			if (sol.x < ray.hitDistance) {
				ray.hitDistance = sol.x;
				ray.hitID = int(i);
			}
		}
	}
	
}

bool CheckLeaf(inout Ray ray, BVHNode node, float tmin, float tmax) {
		
	uint count = node.data0 & uint(0x1fffffff);
	uint offset = node.data1;
	
	vec3 sol, v0, v1, v2, n;
	bool hit = false;
	
	for (uint i = offset; i < offset + count; i++) {
		v0 = triangles[i].v0.xyz;
		v1 = triangles[i].v1.xyz;
		v2 = triangles[i].v2.xyz;
		float d = 0.0;
#ifdef BACKFACE_CULLING
		n = cross(v0 - v1, v0 - v2);
		d = dot(n, ray.direction);
#endif
		bool intersect = IntersectTriangle(ray, v0, v1, v2, sol);
		if (intersect && sol.x > tmin && sol.x < tmax && d <= 0.0) {			
			hit = true;
			ray.hitDistance = sol.x;
			ray.hitID = int(i);
			break;
		}
	}

	return hit;
	
}

float CheckLeafTransparency(inout Ray ray, BVHNode node, float tmin, float tmax, float transparency) {

	uint count = node.data0 & uint(0x1fffffff);
	uint offset = node.data1;
	
	vec3 sol, v0, v1, v2, n;
	bool hit = false;
	
	for (uint i = offset; i < offset + count; i++) {
		v0 = triangles[i].v0.xyz;
		v1 = triangles[i].v1.xyz;
		v2 = triangles[i].v2.xyz;
		float d = 0.0;
#ifdef BACKFACE_CULLING
		n = cross(v0 - v1, v0 - v2);
		d = dot(n, ray.direction);
#endif
		bool intersect = IntersectTriangle(ray, v0, v1, v2, sol);
		if (intersect && sol.x > tmin && sol.x < tmax && d <= 0.0) {
			ray.hitDistance = sol.x;
			ray.hitID = int(i);
			Triangle tri = UnpackTriangle(triangles[i]);
			transparency *= (1.0 - GetOpacity(tri, sol.yz));
		}
	}

	return transparency;

}

void HitClosest(inout Ray ray, float tMin, float tMax) {
	
	uint stackPtr = 1u;
	uint threadID = gl_LocalInvocationIndex;
	stack[0][threadID] = 0;
	
	ray.hitDistance = tMax;
	BVHNode node = UnpackNode(nodes[0]);
	
	while (stackPtr != 0u) {		
		if((node.data0 & uint(0x80000000)) > 0u) {
			CheckLeafClosest(ray, node, tMin, ray.hitDistance);
			node =  UnpackNode(nodes[stack[--stackPtr][threadID]]);
		}
		else {
			if (stackPtr + 1u >= uint(STACK_SIZE)) break;
			
			uint childLPtr = node.data0;
			uint childRPtr = node.data1;

			float hitL = tMax, hitR = tMax;
			BVHNode nodeL = UnpackNode(nodes[childLPtr]);
			BVHNode nodeR = UnpackNode(nodes[childRPtr]);

			bool intersectL = IntersectAABB(ray, 
				nodeL.aabb, tMin, ray.hitDistance, hitL);		
			bool intersectR = IntersectAABB(ray, 
				nodeR.aabb, tMin, ray.hitDistance, hitR);

			bool noIntersection = !intersectL && !intersectR;

			node = hitL <= hitR ? nodeL : nodeR;
			node = noIntersection ? UnpackNode(nodes[stack[--stackPtr][threadID]]) : node;
			uint stackIdx = hitL <= hitR ? childRPtr : childLPtr;

			if (intersectR && intersectL) {
				stack[stackPtr++][threadID] = stackIdx;
			}
		}
	}
		
}

bool HitAny(inout Ray ray, float tMin, float tMax) {
	
	bool hit = false;

	uint stackPtr = 1u;
	uint threadID = gl_LocalInvocationIndex;
	stack[0][threadID] = 0u;
	
	BVHNode node = UnpackNode(nodes[0]);
	
	while (stackPtr != 0u) {
		if((node.data0 & uint(0x80000000)) > 0u) {
			if (CheckLeaf(ray, node, tMin, tMax)) {
				hit = true;
				break;
			}
			node = UnpackNode(nodes[stack[--stackPtr][threadID]]);
		}
		else {
			if (stackPtr + 1u >= uint(STACK_SIZE)) break;

			uint childLPtr = node.data0;
			uint childRPtr = node.data1;

			BVHNode nodeL = UnpackNode(nodes[childLPtr]);
			BVHNode nodeR = UnpackNode(nodes[childRPtr]);

			bool intersectL = IntersectAABB(ray, 
				nodeL.aabb, tMin, tMax);		
			bool intersectR = IntersectAABB(ray, 
				nodeR.aabb, tMin, tMax);

			node = intersectR ? nodeR : nodeL;
			node = !intersectR && !intersectL ? UnpackNode(nodes[stack[--stackPtr][threadID]]) : node;

			if (intersectR && intersectL) {
				stack[stackPtr++][threadID] = childLPtr;
			}
		}
	}	

	return hit;
		
}

float HitAnyShadow(inout Ray ray, float tMin, float tMax) {
	
	float transparency = 1.0;

	uint stackPtr = 1u;
	uint threadID = gl_LocalInvocationIndex;
	stack[0][threadID] = 0u;
	
	BVHNode node = UnpackNode(nodes[0]);
	
	while (stackPtr != 0u) {
		if((node.data0 & uint(0x80000000)) > 0u) {
			transparency *= CheckLeafTransparency(ray, node, tMin, tMax, transparency);
			if (transparency < 0.000001) {
				transparency = 0.0;
				break;
			}
			node = UnpackNode(nodes[stack[--stackPtr][threadID]]);
		}
		else {
			if (stackPtr + 1u >= uint(STACK_SIZE)) break;

			uint childLPtr = node.data0;
			uint childRPtr = node.data1;

			BVHNode nodeL = UnpackNode(nodes[childLPtr]);
			BVHNode nodeR = UnpackNode(nodes[childRPtr]);

			bool intersectL = IntersectAABB(ray, 
				nodeL.aabb, tMin, tMax);		
			bool intersectR = IntersectAABB(ray, 
				nodeR.aabb, tMin, tMax);

			node = intersectR ? nodeR : nodeL;
			node = !intersectR && !intersectL ? UnpackNode(nodes[stack[--stackPtr][threadID]]) : node;

			if (intersectR && intersectL) {
				stack[stackPtr++][threadID] = childLPtr;
			}
		}
	}	

	return transparency;
		
}